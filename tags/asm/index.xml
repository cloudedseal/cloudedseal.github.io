<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>keep doing – Asm</title><link>https://cloudedseal.github.io/tags/asm/</link><description>Recent content in Asm on keep doing</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 21 Apr 2025 15:34:28 +0800</lastBuildDate><atom:link href="https://cloudedseal.github.io/tags/asm/index.xml" rel="self" type="application/rss+xml"/><item><title>Asm How Glibc Wrap Syscall</title><link>https://cloudedseal.github.io/blog/asm-how-glibc-wrap-syscall/</link><pubDate>Mon, 21 Apr 2025 15:34:28 +0800</pubDate><guid>https://cloudedseal.github.io/blog/asm-how-glibc-wrap-syscall/</guid><description>
&lt;blockquote>
&lt;p>实验平台: x86_64 GNU/Linux mint22.1&lt;/p>
&lt;/blockquote>
&lt;h2>使用 &lt;code>glibc&lt;/code> 的函数&lt;span class="hx-absolute -hx-mt-20" id="使用-glibc-的函数">&lt;/span>
&lt;a href="#%e4%bd%bf%e7%94%a8-glibc-%e7%9a%84%e5%87%bd%e6%95%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>write1.c&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello, glibc!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// glibc&amp;#39;s write() wrapper
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol>
&lt;li>gcc -o write1 write1.c&lt;/li>
&lt;li>使用 &lt;code>ltrace ./write1&lt;/code> 查看调用了 write 库函数&lt;/li>
&lt;/ol>
&lt;h2>不使用 glibc 的函数&lt;span class="hx-absolute -hx-mt-20" id="不使用-glibc-的函数">&lt;/span>
&lt;a href="#%e4%b8%8d%e4%bd%bf%e7%94%a8-glibc-%e7%9a%84%e5%87%bd%e6%95%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>write2.c&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;errno.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;syscall.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">ssize_t&lt;/span> &lt;span class="nf">write_no_glibc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">ret&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">asm&lt;/span> &lt;span class="k">volatile&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;syscall&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">:&lt;/span> &lt;span class="s">&amp;#34;=a&amp;#34;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ret&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Output: result in rax
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">__NR_write&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;D&amp;#34;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;S&amp;#34;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;d&amp;#34;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Inputs
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s">&amp;#34;rcx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;r11&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;memory&amp;#34;&lt;/span> &lt;span class="c1">// Clobbered registers
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ret&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">errno&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">ret&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Set errno on error
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">ret&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Return bytes written
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello, glibc!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">write_no_glibc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol>
&lt;li>gcc -o write2 write2.c&lt;/li>
&lt;li>使用 &lt;code>ltrace ./write2&lt;/code> 查看没有调用 write 库函数&lt;/li>
&lt;/ol>
&lt;h2>How glibc Wraps System Calls​​&lt;span class="hx-absolute -hx-mt-20" id="how-glibc-wraps-system-calls">&lt;/span>
&lt;a href="#how-glibc-wraps-system-calls" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>​System Call Number​​&lt;span class="hx-absolute -hx-mt-20" id="system-call-number">&lt;/span>
&lt;a href="#system-call-number" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Each system call (e.g., write, read) is assigned a &lt;code>unique number&lt;/code> (e.g., __NR_write). 要使用哪一个 syscall&lt;/p>
&lt;h3>Argument Setup​​&lt;span class="hx-absolute -hx-mt-20" id="argument-setup">&lt;/span>
&lt;a href="#argument-setup" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>The wrapper loads the system call number and arguments into specific registers (architecture-dependent). 设置 syscall 的参数&lt;/p>
&lt;h3>​Kernel Transition​​&lt;span class="hx-absolute -hx-mt-20" id="kernel-transition">&lt;/span>
&lt;a href="#kernel-transition" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>The wrapper uses an instruction like syscall (x86-64) to switch to kernel mode. 进入 kernel mode&lt;/p>
&lt;h3>Result Handling​​&lt;span class="hx-absolute -hx-mt-20" id="result-handling">&lt;/span>
&lt;a href="#result-handling" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>After the kernel finishes, the wrapper checks for errors, sets errno if needed, and returns the result. 处理返回值&lt;/p>
&lt;h2>References&lt;span class="hx-absolute -hx-mt-20" id="references">&lt;/span>
&lt;a href="#references" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ol>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/ltrace.1.html" target="_blank" rel="noopener">https://man7.org/linux/man-pages/man1/ltrace.1.html&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Asm How Java Byte Code Execute</title><link>https://cloudedseal.github.io/blog/asm-how-java-byte-code-execute/</link><pubDate>Wed, 05 Apr 2023 10:35:32 +0800</pubDate><guid>https://cloudedseal.github.io/blog/asm-how-java-byte-code-execute/</guid><description>
&lt;h2>jvm&lt;span class="hx-absolute -hx-mt-20" id="jvm">&lt;/span>
&lt;a href="#jvm" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>jvm 是一个栈式(stack-based)虚拟计算机。啥意思，就是大多数的 opcode 的操作数在 operand stack 上，执行的结果也放在 oprand stack 上。&lt;br>
有的 opcode 的操作数在 local variable table，如 &lt;code>iinc&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h2>分析的代码&lt;span class="hx-absolute -hx-mt-20" id="分析的代码">&lt;/span>
&lt;a href="#%e5%88%86%e6%9e%90%e7%9a%84%e4%bb%a3%e7%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">stardustman.github.io&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">BoxingUnboxingExample&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1000000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Auto-boxing of primitive type int to Integer&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The sum is: &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h2>jclasslib 查看字节码&lt;span class="hx-absolute -hx-mt-20" id="jclasslib-查看字节码">&lt;/span>
&lt;a href="#jclasslib-%e6%9f%a5%e7%9c%8b%e5%ad%97%e8%8a%82%e7%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;img src="https://raw.githubusercontent.com/stardustman/pictures/main/img/BoxingUnboxingExample.jpg" alt="BoxingUnboxingExample" loading="lazy" />&lt;/p>
&lt;h2>字节码执行过程&lt;span class="hx-absolute -hx-mt-20" id="字节码执行过程">&lt;/span>
&lt;a href="#%e5%ad%97%e8%8a%82%e7%a0%81%e6%89%a7%e8%a1%8c%e8%bf%87%e7%a8%8b" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;img src="https://raw.githubusercontent.com/stardustman/pictures/main/img/jvm%20-byte-code-execute.svg" alt="jvm-byte-code-execute" loading="lazy" />&lt;/p>
&lt;h2>References&lt;span class="hx-absolute -hx-mt-20" id="references">&lt;/span>
&lt;a href="#references" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ol>
&lt;li>&lt;a href="https://www.geeksforgeeks.org/evaluation-of-postfix-expression/" target="_blank" rel="noopener">postfix-expression&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/ingokegel/jclasslib/releases" target="_blank" rel="noopener">jclasslib&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.oracle.com/javase/specs/jvms/se19/html/jvms-6.html#jvms-6.5.iconst_i" target="_blank" rel="noopener">jvms-6.5.iconst_i&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.oracle.com/javase/specs/jvms/se19/html/jvms-6.html#jvms-6.5.invokestatic" target="_blank" rel="noopener">jvms-6.5.invokestatic&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.oracle.com/javase/specs/jvms/se19/html/jvms-6.html#jvms-6.5.getstatic" target="_blank" rel="noopener">jvms-6.5.getstatic&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>asm-how-computer-startup</title><link>https://cloudedseal.github.io/blog/asm-how-computer-startup/</link><pubDate>Mon, 08 Jun 2020 08:09:12 +0800</pubDate><guid>https://cloudedseal.github.io/blog/asm-how-computer-startup/</guid><description>
&lt;p>&lt;code>x86&lt;/code> 架构计算机是如何启动的？&lt;/p>
&lt;h2>16-bit Processors and Segmentation (1978)&lt;span class="hx-absolute -hx-mt-20" id="16-bit-processors-and-segmentation-1978">&lt;/span>
&lt;a href="#16-bit-processors-and-segmentation-1978" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>The IA-32 architecture family was preceded by &lt;code>16-bit processors&lt;/code>, the 8086 and 8088. The 8086 has &lt;code>16-bit registers&lt;/code> and a &lt;code>16-bit external data bus&lt;/code>, with &lt;code>20-bit addressing giving a 1-MByte address space&lt;/code>. The 8088 is similar to the 8086 except it has an 8-bit external data bus.
The 8086/8088 introduced &lt;code>segmentation&lt;/code> to the IA-32 architecture. With segmentation, a &lt;code>16-bit segment register&lt;/code> contains a pointer to &lt;code>a memory segment of up to 64 KBytes&lt;/code>. Using &lt;code>four&lt;/code> segment registers at a time, 8086/8088 processors are able to address up to 256 KBytes &lt;code>without&lt;/code> switching between segments. The 20-bit addresses that can be formed using a segment register and an additional 16-bit pointer provide a total address range of 1 MByte.&lt;/p>
&lt;/blockquote>
&lt;p>8086 是整个 intel 系列处理器的老祖宗。所有后续的一系列处理器都兼容 8086。唉，这就是路径依赖啊。这是一个 16-bit 的处理器。寄存器也是 16-bit 的。but 却能寻址 20-bit 的地址空间，也就是 1M 的内存。怎样在 16-bit 的处理器上实现呢？很简单，将 1M 的空间分成多个 64K 的 segment。那怎样用 16-bit 的寄存器表示 20-bit 的地址呢？也很简单，用 2 个 16-bit 的寄存器组合得来的(register1,register2)。那怎样组合的呢？&lt;code>address = register1 &amp;lt;&amp;lt; 4 + register2&lt;/code>。将 register1 &amp;laquo; 4 和 register2 用一个 20-bit 的加法器就能得到内存地址。这种方式就是所谓的 &lt;code>real address mode&lt;/code>。也即是拿到的是真正的内存地址。x86 架构的计算机启动时会先进入 real address mode。&lt;/p>
&lt;h2>计算机启动前置知识&lt;span class="hx-absolute -hx-mt-20" id="计算机启动前置知识">&lt;/span>
&lt;a href="#%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%90%af%e5%8a%a8%e5%89%8d%e7%bd%ae%e7%9f%a5%e8%af%86" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ol>
&lt;li>CPU 工作方式是: 从&lt;code>内存&lt;/code>中取指、执行。&lt;/li>
&lt;li>内存是存储数据的地方，给出一个内存地址，可以得到该处的数据。&lt;/li>
&lt;li>CPU 从内存哪里取指令，由 &lt;code>instruction pointer&lt;/code> 这个寄存器的值决定。这个值不断 +1，或者跳转(jump) 到某处。real address mode 下由 CS:IP 组合决定。&lt;/li>
&lt;/ol>
&lt;h2>BIOS&lt;span class="hx-absolute -hx-mt-20" id="bios">&lt;/span>
&lt;a href="#bios" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>BIOS 是啥&lt;span class="hx-absolute -hx-mt-20" id="bios-是啥">&lt;/span>
&lt;a href="#bios-%e6%98%af%e5%95%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;code>BIOS&lt;/code> 是啥呢？一个软件而已。不像我们平时在 PC 上使用如 &lt;code>QQ&lt;/code> 等软件是安装在硬盘上的。BIOS 安装在 ROM 中。这个软件干啥的呢？帮助计算机启动，开机时检测整个机器的硬件。计算机启动需要运行软件，软件运行需要计算机先启动。咳咳，成了先有鸡还是先有蛋了，这怎么行？所以需要 BIOS 这个在硬件上的软件来帮助，破除这种依赖。&lt;/p>
&lt;h3>BIOS 大小&lt;span class="hx-absolute -hx-mt-20" id="bios-大小">&lt;/span>
&lt;a href="#bios-%e5%a4%a7%e5%b0%8f" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>通过 &lt;code>dmidecode&lt;/code> 这个命令来查看。也就是读取 BIOS 的信息。&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">root@aliyun:~# dmidecode -t bios -q &lt;span class="c1"># 方法一&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">BIOS Information
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Vendor: SeaBIOS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Version: 8c24b4c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Release Date: 04/01/2014
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Address: 0xE8000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Runtime Size: &lt;span class="m">96&lt;/span> kB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ROM Size: &lt;span class="m">64&lt;/span> kB --- ROM Size，在此可以看到，BIOS 大小为 64K。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Characteristics:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> BIOS characteristics not supported
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Targeted content distribution is supported
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> BIOS Revision: 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@aliyun:~# &lt;span class="nb">cd&lt;/span> /sys/class/dmi/id/ &lt;span class="c1"># 方法二&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@aliyun:id# ls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bios_date chassis_serial modalias product_serial sys_vendor
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bios_vendor chassis_type power product_uuid uevent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bios_version chassis_vendor product_family product_version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chassis_asset_tag chassis_version product_name subsystem&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h2>x86 架构计算机启动流程&lt;span class="hx-absolute -hx-mt-20" id="x86-架构计算机启动流程">&lt;/span>
&lt;a href="#x86-%e6%9e%b6%e6%9e%84%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%90%af%e5%8a%a8%e6%b5%81%e7%a8%8b" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/real-address-mode-how-computer-startup.svg" alt="real address mode 1M 内存布局" loading="lazy" /> #(real address mode 1M 内存布局)&lt;/p>
&lt;ol>
&lt;li>
&lt;p>如上图所示，当按下 &lt;code>power on&lt;/code> 之后，此时的 CPU 处于 real address mode。由硬件负责将 &lt;code>BIOS 64K&lt;/code> 的内容加载到 &lt;code>0xF0000 到 0xFFFFF&lt;/code>(64K 内存)。并将 &lt;code>CS(code segment) 置为 0xF000&lt;/code>，&lt;code>IP(instruction pointer) 置为 0xFFF0&lt;/code>。组合起来的内存地址 &lt;code>PC&lt;/code> 就是 0xFFFF0。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>此时 CPU 从 &lt;code>PC = 0xFFFF0&lt;/code> 处开始取指、执行。那么从 &lt;code>0xFFFF0 到 0xFFFFF&lt;/code> 只有 16Bytes。空间太小了，能放啥呢？但是可以跳到其他地方去执行啊。不错，这里存放的有一条指令是 &lt;code>jmp far f000:e05b&lt;/code>, 组合起来就是 &lt;code>0xfe05b&lt;/code>。注意这个地址可是在 &lt;code>0xF0000 到 0xFFFFF&lt;/code> 范围之内，也就是这条指令跳转到 &lt;code>BIOS 内部的代码&lt;/code>去执行。从 0xFE05B 到 0xFFFF0 将近 8K 内存，代码不少。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>此时 CPU 从 &lt;code>PC = 0xfe05b&lt;/code> 开始取值、执行。具体干啥呢？就是执行所谓的开机自检。检查计算机硬件。同时去找启动扇区，那什么才是启动扇区呢？若 0 盘 0 道 1 扇区最后两个字节分别是 0x55,0xaa，那就是启动区。很像 java class 文件中的魔数，就是标记一下。同时将找到的启动扇区(512Bytes) 复制到内存 &lt;code>0x7C00 到 0x7DFF&lt;/code>(512Bytes) 处。最后会将 &lt;code>CS 置为 0x0000， IP 置为 0x7C00&lt;/code>，组合起来就是 &lt;code>0x7C00&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>此时 CPU 从 &lt;code>PC = 0x7C00&lt;/code> 开始取值、执行。具体干啥呢？这就是开发人员可以决定的了。在启动扇区上可以是加载 OS Kernel 的代码，硬盘分区，boot loader 等。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2>References&lt;span class="hx-absolute -hx-mt-20" id="references">&lt;/span>
&lt;a href="#references" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>1.&lt;a href="http://dewkumar.blogspot.com/2012/01/what-is-org-origin-directive-in.html" target="_blank" rel="noopener">x86-ORG&lt;/a>
2. &lt;a href="https://superuser.com/questions/806226/how-to-see-rom-size" target="_blank" rel="noopener">how-to-see-rom-size&lt;/a>
3. &lt;a href="http://smilejay.com/2013/02/bios-info-dmidecode/" target="_blank" rel="noopener">bios-info-dmidecode&lt;/a>
4. &lt;a href="https://en.wikipedia.org/wiki/System_Management_BIOS" target="_blank" rel="noopener">system-management-bios&lt;/a>
5. &lt;a href="http://www.ruanyifeng.com/blog/2013/02/booting.html" target="_blank" rel="noopener">计算机是如何启动的？&lt;/a>
6. &lt;a href="https://en.wikipedia.org/wiki/Master_boot_record" target="_blank" rel="noopener">多种 MBR 组织方式&lt;/a>
7. &lt;a href="https://mp.weixin.qq.com/s/g6m_r28bvyyWIu1CAzxLdg" target="_blank" rel="noopener">计算机是怎样启动的？&lt;/a>&lt;/p></description></item><item><title>asm-how-recursion-function-execute</title><link>https://cloudedseal.github.io/blog/asm-how-recursion-function-execute/</link><pubDate>Sat, 06 Jul 2019 16:35:51 +0800</pubDate><guid>https://cloudedseal.github.io/blog/asm-how-recursion-function-execute/</guid><description>
&lt;h1>斐波那契数列&lt;/h1>&lt;h2>问题描述&lt;span class="hx-absolute -hx-mt-20" id="问题描述">&lt;/span>
&lt;a href="#%e9%97%ae%e9%a2%98%e6%8f%8f%e8%bf%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>第一个月初有一对刚诞生的兔子
第二个月之后(第三个月)它们可以生育
每月每对可生育的兔子会诞生下一对新兔子
兔子永不死
问第 n 月有多少对兔子?&lt;/p>
&lt;/blockquote>
&lt;h2>图解&lt;span class="hx-absolute -hx-mt-20" id="图解">&lt;/span>
&lt;a href="#%e5%9b%be%e8%a7%a3" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>假设在n月有兔子总共 a 对, n+1 月总共有 b 对. 在 n+2 月必定总共有 a+b 对: 因为在 n+2 月的时候, 前一月(n+1月) 的 b 对兔子可以存留至第 n+2 月(在当月属于新诞生的兔子尚不能生育). 而新生育出的兔子对数等于所有在 n 月就已存在的 a 对.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/fibonacci-sequence.png" alt="fibonacci-sequence" loading="lazy" />&lt;/p>
&lt;h1>代码分析&lt;/h1>&lt;h2>C 代码&lt;span class="hx-absolute -hx-mt-20" id="c-代码">&lt;/span>
&lt;a href="#c-%e4%bb%a3%e7%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="nf">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//printf(&amp;#34;%d\n&amp;#34;,result);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h2>Asm 代码&lt;span class="hx-absolute -hx-mt-20" id="asm-代码">&lt;/span>
&lt;a href="#asm-%e4%bb%a3%e7%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>中间代码&lt;span class="hx-absolute -hx-mt-20" id="中间代码">&lt;/span>
&lt;a href="#%e4%b8%ad%e9%97%b4%e4%bb%a3%e7%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gas" data-lang="gas">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">long&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">subq&lt;/span> &lt;span class="no">$24&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rsp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rdi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// n
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">cmpq&lt;/span> &lt;span class="no">$2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// n - 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">jg&lt;/span> &lt;span class="no">.L2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">movl&lt;/span> &lt;span class="no">$1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%eax&lt;/span> &lt;span class="c1">// n &amp;lt;= 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">jmp&lt;/span> &lt;span class="no">.L3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">.L2:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">// n
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">subq&lt;/span> &lt;span class="no">$1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">// n - 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rdi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">call&lt;/span> &lt;span class="no">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">long&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbx&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">// n
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">subq&lt;/span> &lt;span class="no">$2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">// n - 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rdi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">call&lt;/span> &lt;span class="no">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">long&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">addq&lt;/span> &lt;span class="nv">%rbx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">.L3:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">addq&lt;/span> &lt;span class="no">$24&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rsp&lt;/span> &lt;span class="c1">// 释放分配的栈空间
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">popq&lt;/span> &lt;span class="nv">%rbx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">popq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ret&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">main:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">subq&lt;/span> &lt;span class="no">$16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rsp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%edi&lt;/span> &lt;span class="c1">// n = 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">call&lt;/span> &lt;span class="no">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">long&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// result = fib(3)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">leave&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ret&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/fib-label.png" alt="fib-label" loading="lazy" />&lt;/p>
&lt;h3>反编译可执行代码&lt;span class="hx-absolute -hx-mt-20" id="反编译可执行代码">&lt;/span>
&lt;a href="#%e5%8f%8d%e7%bc%96%e8%af%91%e5%8f%af%e6%89%a7%e8%a1%8c%e4%bb%a3%e7%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gas" data-lang="gas">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">long&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">push&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">mov&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">push&lt;/span> &lt;span class="nv">%rbx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sub&lt;/span> &lt;span class="no">$0x18&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">%rsp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">mov&lt;/span> &lt;span class="nv">%rdi&lt;/span>&lt;span class="p">,-&lt;/span>&lt;span class="mi">0x18&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">cmpq&lt;/span> &lt;span class="no">$0x2&lt;/span>&lt;span class="p">,-&lt;/span>&lt;span class="mi">0x18&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">jg&lt;/span> &lt;span class="mi">4004&lt;/span>&lt;span class="no">cd&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="no">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">long&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0x1b&lt;/span>&lt;span class="err">&amp;gt;&lt;/span> &lt;span class="c1">// 0x1b 是地址为 4004cd 这条指令之前的所有指令的字节数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">$0x1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">%eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">jmp&lt;/span> &lt;span class="mi">4004&lt;/span>&lt;span class="no">f3&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="no">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">long&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0x41&lt;/span>&lt;span class="err">&amp;gt;&lt;/span> &lt;span class="c1">// 0x41 是地址为 4004f3 这条指令之前的所有指令的字节数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">0x18&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="nv">%rax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sub&lt;/span> &lt;span class="no">$0x1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">%rax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">mov&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">%rdi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">callq&lt;/span> &lt;span class="mi">4004&lt;/span>&lt;span class="no">b2&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="no">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">long&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">mov&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">%rbx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">mov&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">0x18&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="nv">%rax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sub&lt;/span> &lt;span class="no">$0x2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">%rax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">mov&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">%rdi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">callq&lt;/span> &lt;span class="mi">4004&lt;/span>&lt;span class="no">b2&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="no">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">long&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">add&lt;/span> &lt;span class="nv">%rbx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">%rax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">add&lt;/span> &lt;span class="no">$0x18&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">%rsp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pop&lt;/span> &lt;span class="nv">%rbx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pop&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">retq&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="no">main&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">push&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">mov&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sub&lt;/span> &lt;span class="no">$0x10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">%rsp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="no">$0x0&lt;/span>&lt;span class="p">,-&lt;/span>&lt;span class="mi">0x8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">$0x4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">%edi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">callq&lt;/span> &lt;span class="mi">4004&lt;/span>&lt;span class="no">b2&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="no">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">long&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">mov&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,-&lt;/span>&lt;span class="mi">0x8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">$0x0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">%eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">leaveq&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">retq&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">nop&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/fib-label.png" alt="fib" loading="lazy" />&lt;/p>
&lt;blockquote>
&lt;p>fib(n)函数里调用 fib(n - 1) 和 fib(n - 2)视为两个和 fib(n) 完全不同的函数, 因为函数返回地址在汇编层面根本不一样. &lt;br>
fib(n), fib(n - 1) 和 fib(n - 2) 的处理逻辑不一样, 只是之间有依赖而已. &lt;br>
也可以视为编译器级别的函数重载. 理解成三个不同的函数, 这个递归就很好理解了. &lt;br>&lt;/p>
&lt;/blockquote>
&lt;h2>调用栈调用顺序分析&lt;span class="hx-absolute -hx-mt-20" id="调用栈调用顺序分析">&lt;/span>
&lt;a href="#%e8%b0%83%e7%94%a8%e6%a0%88%e8%b0%83%e7%94%a8%e9%a1%ba%e5%ba%8f%e5%88%86%e6%9e%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>调用栈图解分析&lt;span class="hx-absolute -hx-mt-20" id="调用栈图解分析">&lt;/span>
&lt;a href="#%e8%b0%83%e7%94%a8%e6%a0%88%e5%9b%be%e8%a7%a3%e5%88%86%e6%9e%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/fib%284%29-call-stack.png" alt="fib(4)调用栈分析" loading="lazy" /> #(fib(4)调用栈分析)&lt;/p>
&lt;h3>符合递归终止时调用栈执行顺序&lt;span class="hx-absolute -hx-mt-20" id="符合递归终止时调用栈执行顺序">&lt;/span>
&lt;a href="#%e7%ac%a6%e5%90%88%e9%80%92%e5%bd%92%e7%bb%88%e6%ad%a2%e6%97%b6%e8%b0%83%e7%94%a8%e6%a0%88%e6%89%a7%e8%a1%8c%e9%a1%ba%e5%ba%8f" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;blockquote>
&lt;p>fib(3) = fib(2) + fib(1), 就符合递归退出的条件.&lt;/p>
&lt;/blockquote>
&lt;h4>代码执行顺序&lt;span class="hx-absolute -hx-mt-20" id="代码执行顺序">&lt;/span>
&lt;a href="#%e4%bb%a3%e7%a0%81%e6%89%a7%e8%a1%8c%e9%a1%ba%e5%ba%8f" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/fib%283%29-execute-sequence.png" alt="fib(3)-execute-sequence" loading="lazy" /> #(fib(3)-execute-sequence)&lt;/p>
&lt;h4>二叉树后序遍历的视角来分析&lt;span class="hx-absolute -hx-mt-20" id="二叉树后序遍历的视角来分析">&lt;/span>
&lt;a href="#%e4%ba%8c%e5%8f%89%e6%a0%91%e5%90%8e%e5%ba%8f%e9%81%8d%e5%8e%86%e7%9a%84%e8%a7%86%e8%a7%92%e6%9d%a5%e5%88%86%e6%9e%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;blockquote>
&lt;p>递归终止条件: &lt;br>
fib(2) = 1 视为左叶子节点 &lt;br>
fib(1) = 1 视为右叶子节点 &lt;br>
fib(3) = fib(2) + fib(1) 视为父节点 &lt;br>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/fib%283%29-execute-squence-treefy.png" alt="fib(3)-execute-squence-treefy" loading="lazy" /> #(符合递归退出代码执行流程)&lt;/p>
&lt;blockquote>
&lt;p>fib(3) 调用 fib(2), 计算出参数 n = 2. 进入左叶子节点. &lt;br>
fib(2) 返回 fib(3), fib(2) 的返回值 rax = 1, 复制给 rbx. &lt;br>
fib(3) 调用 fib(1), 计算出参数 n = 1. 进入右叶子节点. &lt;br>
fib(1) 返回 fib(3), fib(1) 的返回值 rax = 1 &lt;br>
fib(3) 计算 fib(3) = fib(2) + fib(1) = rbx + rax = 1 + 1 = 2 &lt;br>&lt;/p>
&lt;/blockquote>
&lt;h4>栈帧的创建和销毁-二叉树后序遍历&lt;span class="hx-absolute -hx-mt-20" id="栈帧的创建和销毁-二叉树后序遍历">&lt;/span>
&lt;a href="#%e6%a0%88%e5%b8%a7%e7%9a%84%e5%88%9b%e5%bb%ba%e5%92%8c%e9%94%80%e6%af%81-%e4%ba%8c%e5%8f%89%e6%a0%91%e5%90%8e%e5%ba%8f%e9%81%8d%e5%8e%86" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;blockquote>
&lt;p>fib(n) = fib(n-1) + fib(n-2)(n &amp;gt; 2) 递归调用可以看作是栈帧按照二叉树后续遍历(左子树-右子树-根)的顺序动态的创建和销毁. &lt;br>
着色方框为创建的栈帧 &lt;br>
白色方框为销毁的栈帧或者还未创建的栈帧 &lt;br>
方框由白色变为着色: 栈帧创建 &lt;br>
方框由着色变为白色: 栈帧销毁 &lt;br>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/fib-dynamic-stack-frame.png" alt="fib-dynamic-stack-frame" loading="lazy" />&lt;/p>
&lt;blockquote>
&lt;p>从图中可以看出假如 main 调用 fib(5), 会一直调用到 f(2) 才会终止. 则调用栈状态如图 0. 此时递归最大的栈深度是 4, 如果 n 值过大, 会很容易发生 Stack Overflow 这种错误. 比方说 fib(1000) 会一直创建到 fib(2) 这个栈帧, 递归才会开始返回. &lt;br>
fib(2) 返回 1 给 fib(3), fib(3) 保存这个返回值. f(2) 栈帧销毁. 如图 1. &lt;br>
fib(3) 调用 fib(2) 如图 2.
fib(2) 返回 1 给 fib(3), fib(3) 将 fib(2)返回值和 fib(1) 的返回值相加. 如图 3. &lt;br>
fib(3) 返回 fib(2)返回值和 fib(1) 的返回值相加的结果. 如图 4. &lt;br>&lt;/p>
&lt;/blockquote>
&lt;h5>效率低原因分析&lt;span class="hx-absolute -hx-mt-20" id="效率低原因分析">&lt;/span>
&lt;a href="#%e6%95%88%e7%8e%87%e4%bd%8e%e5%8e%9f%e5%9b%a0%e5%88%86%e6%9e%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;blockquote>
&lt;p>计算的结果并没有保存. &lt;br>
每一次进入递归之后都是从基本的 fib(2) 和 fib(1) 向上返回. &lt;br>
中间伴随着大量的栈帧创建和销毁, 以及重复的函数计算.函数栈帧的创建和销毁是耗时的操作, 这可就很慢了. &lt;br>
fib(n) 开辟栈帧总数量可以表示为: sum(n) = 2^(n - 2) + 1 (n &amp;gt;= 3). &lt;br>
时间复杂度是: O(2^n) &lt;br>&lt;/p>
&lt;/blockquote>
&lt;h5>运行时间测试&lt;span class="hx-absolute -hx-mt-20" id="运行时间测试">&lt;/span>
&lt;a href="#%e8%bf%90%e8%a1%8c%e6%97%b6%e9%97%b4%e6%b5%8b%e8%af%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;time.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define LENGTH 51
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">clock_t&lt;/span> &lt;span class="n">beginTime&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">endTime&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">beginTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LENGTH&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">endTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Running Time %f Seconds&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">endTime&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">beginTime&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">CLOCKS_PER_SEC&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34; %d :: %lu &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LENGTH&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;blockquote>
&lt;p>fib(n) 开辟栈帧总数量可以表示为: sum(n) = 2^(n - 2) + 1 (n &amp;gt;= 3). &lt;br>
时间复杂度是: O(2^n) &lt;br>
fib(50) 开辟栈帧总量是: sum(50) = 2^(48) + 1 &lt;br>
时间复杂度是: O(2 ^ 50) &lt;br>
计算 fib(50) 费了 65 秒左右 &lt;br>&lt;/p>
&lt;/blockquote>
&lt;h5>解决方法&lt;span class="hx-absolute -hx-mt-20" id="解决方法">&lt;/span>
&lt;a href="#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;blockquote>
&lt;p>用数组保存已经计算出来的 fib(n) 的结果. 修改计算逻辑, 如果 fib(n) 已经被计算, 直接使用, 不再进入递归计算. &lt;br>
这可不就是有拿空间换时间的感觉. &lt;br>&lt;/p>
&lt;/blockquote>
&lt;h2>优化递归&lt;span class="hx-absolute -hx-mt-20" id="优化递归">&lt;/span>
&lt;a href="#%e4%bc%98%e5%8c%96%e9%80%92%e5%bd%92" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>空间换时间优化代码&lt;span class="hx-absolute -hx-mt-20" id="空间换时间优化代码">&lt;/span>
&lt;a href="#%e7%a9%ba%e9%97%b4%e6%8d%a2%e6%97%b6%e9%97%b4%e4%bc%98%e5%8c%96%e4%bb%a3%e7%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;time.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># define LENGTH 51
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1">// 计算 fib(50)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 全局的用来保存 fib(n)(n &amp;gt; 2) 计算结果的数组.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">LENGTH&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// fib(n) 已经被计算, 那就直接返回.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 保存 fib(n) 的计算结果
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">clock_t&lt;/span> &lt;span class="n">beginTime&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">endTime&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 由于 1, 1, 2, 3, 5 ..... 都是大于 0 的结果, 全部初始化为 0, 相当于都没有计算结果.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">LENGTH&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// fib(1) 的计算结果为 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// fib(2) 的计算结果为 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">beginTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LENGTH&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">endTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Running Time %f Seconds&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">endTime&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">beginTime&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">CLOCKS_PER_SEC&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">LENGTH&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34; %i :: %lu &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>优化递归函数栈帧&lt;span class="hx-absolute -hx-mt-20" id="优化递归函数栈帧">&lt;/span>
&lt;a href="#%e4%bc%98%e5%8c%96%e9%80%92%e5%bd%92%e5%87%bd%e6%95%b0%e6%a0%88%e5%b8%a7" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/fib-optimize-stack-frame.png" alt="fib-optimize-stack-frame" loading="lazy" />
&lt;em>fib(5)递归栈帧)&lt;/em>&lt;/p>
&lt;blockquote>
&lt;p>着色方框-开辟销毁的栈帧 &lt;br>
白色方框-不用开辟的栈帧 &lt;br>
优化后的 fib(n) 开辟栈帧总数量可以表示为: sum(n) = (n - 2)(n &amp;gt;= 3). &lt;br>
时间复杂度是: O(n) &lt;br>
计算 fib(50) 开辟栈帧总数量是: sum(50) = 48 &lt;br>
fib(50) = 3996334433 &lt;br>
时间复杂度是 O(50), 结果几乎秒算. &lt;br>
unsigned long result[LENGTH]; &lt;br>
拿空间换时间, 其实这句话有问题的, 拿出来空间, 计算逻辑也是要优化的. &lt;br>&lt;/p>
&lt;/blockquote>
&lt;h3>尾递归优化&lt;span class="hx-absolute -hx-mt-20" id="尾递归优化">&lt;/span>
&lt;a href="#%e5%b0%be%e9%80%92%e5%bd%92%e4%bc%98%e5%8c%96" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>非优化递归&lt;span class="hx-absolute -hx-mt-20" id="非优化递归">&lt;/span>
&lt;a href="#%e9%9d%9e%e4%bc%98%e5%8c%96%e9%80%92%e5%bd%92" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;blockquote>
&lt;p>汇编视角下这里 fib(n-1) 和 fib(n-2) 与 fib(n) 其实根本不是同一个函数. &lt;br>
三者的逻辑其实不同, 但是函数之间有依赖. &lt;br>&lt;/p>
&lt;/blockquote>
&lt;h4>优化递归&lt;span class="hx-absolute -hx-mt-20" id="优化递归-1">&lt;/span>
&lt;a href="#%e4%bc%98%e5%8c%96%e9%80%92%e5%bd%92-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;blockquote>
&lt;p>尾递归的实现, 往往需要改写递归函数, 确保最后一步只调用自身. 做到这一点的方法, 就是把所有用到的内部变量改写成函数的参数. &lt;br>
尾调用的概念非常简单, 一句话就能说清楚, 就是指某个函数的最后一步是调用另一个函数. &lt;br>&lt;/p>
&lt;/blockquote>
&lt;h5>中间变量改成函数的参数&lt;span class="hx-absolute -hx-mt-20" id="中间变量改成函数的参数">&lt;/span>
&lt;a href="#%e4%b8%ad%e9%97%b4%e5%8f%98%e9%87%8f%e6%94%b9%e6%88%90%e5%87%bd%e6%95%b0%e7%9a%84%e5%8f%82%e6%95%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">prev&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">prev&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 尾调用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;blockquote>
&lt;p>这里 fib(n-1, sum , prev + sum) 的才是和 fib(unsigned long n, unsigned long prev, unsigned long sum ) 完全一样的函数.&lt;/p>
&lt;/blockquote>
&lt;h5>包装一层&lt;span class="hx-absolute -hx-mt-20" id="包装一层">&lt;/span>
&lt;a href="#%e5%8c%85%e8%a3%85%e4%b8%80%e5%b1%82" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">fibonacc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 1 : fib(2)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 2 : fib(2) + fib(1) = fib(3)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;blockquote>
&lt;p>计算结果保存在参数里.&lt;/p>
&lt;/blockquote>
&lt;h5>fib(n) 汇编代码分析&lt;span class="hx-absolute -hx-mt-20" id="fibn-汇编代码分析">&lt;/span>
&lt;a href="#fibn-%e6%b1%87%e7%bc%96%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/fib-tail-recursion.png" alt="fib-tail-recursion" loading="lazy" />
#(尾递归汇编代码)&lt;/p>
&lt;blockquote>
&lt;p>尾递归的 fib(n-1, sum , prev + sum) 是尾调用, 也就是函数执行完没有其他的操作了, 就直接返回了. &lt;br>
符合 n &amp;lt;= 3 的条件, 汇编直接 jmp 到销毁栈帧的代码. 因为返回值在符合递归退出条件时, 已经被设置到 rax 里了. &lt;br>&lt;/p>
&lt;/blockquote>
&lt;h2>结论&lt;span class="hx-absolute -hx-mt-20" id="结论">&lt;/span>
&lt;a href="#%e7%bb%93%e8%ae%ba" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>用简单的一句话,递归就是调用函数本身. 这句话是相当不负责任的. &lt;br>
递归函数在汇编级别的调用自己, 尽管调用的是自己, 递归的函数名尽管相同, 但是函数返回地址是不相同的. 这也意味着其实逻辑完全可能不一样. &lt;br>
结合栈帧的创建和销毁, 就可以理解 &lt;code>Stack Overflow&lt;/code> 这种错误. &lt;br>&lt;/p>
&lt;/blockquote>
&lt;h1>References&lt;/h1>&lt;ol>
&lt;li>&lt;a href="https://stackoverflow.com/questions/21440403/what-does-the-cmpq-instruction-do" target="_blank" rel="noopener">asm-cmpq&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.aldeid.com/wiki/X86-assembly/Instructions/jg" target="_blank" rel="noopener">asm-jg&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://faydoc.tripod.com/cpu/jg.htm" target="_blank" rel="noopener">asm-jp-table&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97" target="_blank" rel="noopener">斐波那契数列&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://godbolt.org/" target="_blank" rel="noopener">asm-tool&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.ruanyifeng.com/blog/2015/04/tail-call.html" target="_blank" rel="noopener">尾调用(tail-call)之尾递归&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/GncAsmZ1dZKyNMOwN5-sjw" target="_blank" rel="noopener">动态规划&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>asm-clang-concepts</title><link>https://cloudedseal.github.io/blog/asm-clang-concepts/</link><pubDate>Tue, 25 Jun 2019 16:57:59 +0800</pubDate><guid>https://cloudedseal.github.io/blog/asm-clang-concepts/</guid><description>
&lt;p>C 语言里的概念在 X86-64 汇编层面的分析. 汇编风格使用 AT&amp;amp;T 风格. 编译器是 gcc-x86-64-9.1&lt;/p>
&lt;h1>指针&lt;/h1>&lt;blockquote>
&lt;p>A &lt;code>pointer&lt;/code> is a programming language object that stores the memory address of another value located in computer memory.
A pointer references a location in memory, and obtaining the value stored at that location is known as dereferencing the pointer.&lt;/p>
&lt;/blockquote>
&lt;h2>变量地址&lt;span class="hx-absolute -hx-mt-20" id="变量地址">&lt;/span>
&lt;a href="#%e5%8f%98%e9%87%8f%e5%9c%b0%e5%9d%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>The lea (load effective address) instruction is used to put a memory address into the destination.
leaq -8(%rbp), %rdx
-8(%rbp)等价于 mem[R[rbp] -8]. 将 rbp - 8 的值(这个值就是内存地址)复制到 rdx.&lt;/p>
&lt;/blockquote>
&lt;h2>寄存器间接寻址&lt;span class="hx-absolute -hx-mt-20" id="寄存器间接寻址">&lt;/span>
&lt;a href="#%e5%af%84%e5%ad%98%e5%99%a8%e9%97%b4%e6%8e%a5%e5%af%bb%e5%9d%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>movq (%rax), %rdx
将 rax 的值(X)指向的内存地址处的值复制到 rdx. 此时 rax 的值(X)就是指针, 所谓指针在汇编层面就是将一个内存地址放到寄存器, 利用寄存器间接寻址去获取这个地址的数值. 这就是 C 语言里指针的本质.&lt;/p>
&lt;/blockquote>
&lt;h2>movq operand combinations&lt;span class="hx-absolute -hx-mt-20" id="movq-operand-combinations">&lt;/span>
&lt;a href="#movq-operand-combinations" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/address-modes.png" alt="movq operand combinations" loading="lazy" />&lt;/p>
&lt;h2>代码分析&lt;span class="hx-absolute -hx-mt-20" id="代码分析">&lt;/span>
&lt;a href="#%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>swap&lt;span class="hx-absolute -hx-mt-20" id="swap">&lt;/span>
&lt;a href="#swap" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">swap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pa&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pb&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pa&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="n">pa&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pb&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="n">pb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gas" data-lang="gas">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">swap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">int&lt;/span>&lt;span class="p">*,&lt;/span> &lt;span class="no">int&lt;/span>&lt;span class="p">*):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rdi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 将变量 a(10) 的地址(&amp;amp;a)复制到 rbp - 24 地址处, 参数 pa
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 将变量 b(100) 的地址(&amp;amp;b)复制到 rbp - 32 地址处, 参数 pb
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; 将 rbp - 24 指向的内存地址的数值(也就是变量 a 的地址)复制到 rax
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">%rax&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%eax&lt;/span> &lt;span class="c1">; 将 rax 指向的内存地址的值 10(也就是变量 a) 复制到 eax, int a 4 Bytes 需要 32 bit 的 eax 即可.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="nv">%eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 将 eax 的值 10 (也就是变量 a) 复制到 rbp - 4 指向的内存地址处, 完成 temp = *pa;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; 将 rbp - 32 指向的内存地址的值(也就是变量 b 的地址) 的地址复制到 rax
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">%rax&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%edx&lt;/span> &lt;span class="c1">; 将 rax 的值指向的内存地址出的值 100(也就是变量 b) 复制到 edx, int b 4 Bytes 需要 32 bit 的 eax 即可.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; 将 rbp - 24 指向的内存地址的值(也就是变量 a 的地址)复制到 rax
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="nv">%edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">%rax&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 将 edx 的值 100 (也就是变量 b)复制到 rax 指向的地址处(也就是变量 a 的地址), 完成 *pa = *pb
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; 将 rbp - 32 指向的内存地址的值(也就是变量 b 的地址)复制到 rax
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%edx&lt;/span> &lt;span class="c1">; 将 rbp - 4 指向的内存地址的值 10 复制到 edx
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="nv">%edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">%rax&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 将 edx 的值 10 复制到 rax 指向的地址处(也就是变量 b 的地址), 完成 *pb = temp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">nop&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">popq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ret&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>main&lt;span class="hx-absolute -hx-mt-20" id="main">&lt;/span>
&lt;a href="#main" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">swap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gas" data-lang="gas">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">main:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span> &lt;span class="c1">; 保存调用者的 rbp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span> &lt;span class="c1">; 开辟 main 函数的栈帧
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">subq&lt;/span> &lt;span class="no">$16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rsp&lt;/span> &lt;span class="c1">; 分配 main 的栈空间 16 bytes
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 将变量 a 复制到 rbp - 4 指向的地址处.(int a, 4 bytes)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 将变量 b 复制到 rbp - 8 指向的地址处.(int b, 4 bytes)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">leaq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rdx&lt;/span> &lt;span class="c1">; 将 rbp - 8 的值复制到 rdx 寄存器(int b 变量的地址)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">leaq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; 将 rbp - 4 的值复制到 rax 寄存器(int a 变量的地址)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rdx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rsi&lt;/span> &lt;span class="c1">; 复制 rdx(第二个参数: 变量 b 的地址) 到 rsi 寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rdi&lt;/span> &lt;span class="c1">; 复制 rax(第一个参数: 变量 a 的地址) 到 rdi 寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">call&lt;/span> &lt;span class="no">swap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">int&lt;/span>&lt;span class="p">*,&lt;/span> &lt;span class="no">int&lt;/span>&lt;span class="p">*)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">leave&lt;/span> &lt;span class="c1">; 等价于 1. mov %rbp, %rsp(回收分配的栈空间) 2.pop %rbp(恢复 main 的 rbp)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">ret&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/swap-c-asm.png" alt="swap-c-asm" loading="lazy" />&lt;/p>
&lt;h3>栈帧分析&lt;span class="hx-absolute -hx-mt-20" id="栈帧分析">&lt;/span>
&lt;a href="#%e6%a0%88%e5%b8%a7%e5%88%86%e6%9e%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/swap-pointer.png" alt="main-swap-call-stack" loading="lazy" />&lt;/p>
&lt;blockquote>
&lt;p>该图是 swap 执行完 int temp = *pa 后的状态.&lt;/p>
&lt;/blockquote>
&lt;h3>函数返回值&lt;span class="hx-absolute -hx-mt-20" id="函数返回值">&lt;/span>
&lt;a href="#%e5%87%bd%e6%95%b0%e8%bf%94%e5%9b%9e%e5%80%bc" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;blockquote>
&lt;p>the return value for the function should be placed in rax if it is not already there.
返回值放在 rax 寄存器. 这是 x86-64 的约定. 架构设计决定只有 rax 一个寄存器存放返回值, 这也是高级语言返回值只能是一个的原因.
C 语言里返回的结构体, 其实也就是结构体第一个字节的地址, 还是一个值.
C 语言的函数返回值为 void, 在汇编层面也就是不用设置 rax.&lt;/p>
&lt;/blockquote>
&lt;h3>结论&lt;span class="hx-absolute -hx-mt-20" id="结论">&lt;/span>
&lt;a href="#%e7%bb%93%e8%ae%ba" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;blockquote>
&lt;p>指针本质就是寄存器间接寻址. 函数传参其实传的都是数值而已, 本质上都是数值的副本.&lt;/p>
&lt;/blockquote>
&lt;h1>数据类型转化&lt;/h1>&lt;h2>整数类型&lt;span class="hx-absolute -hx-mt-20" id="整数类型">&lt;/span>
&lt;a href="#%e6%95%b4%e6%95%b0%e7%b1%bb%e5%9e%8b" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>x86-64 registers&lt;span class="hx-absolute -hx-mt-20" id="x86-64-registers">&lt;/span>
&lt;a href="#x86-64-registers" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/x86-64-registers.png" alt="x86-64-registers" loading="lazy" />&lt;/p>
&lt;h3>IA32 registers&lt;span class="hx-absolute -hx-mt-20" id="ia32-registers">&lt;/span>
&lt;a href="#ia32-registers" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/IA32-registers.png" alt="IA32-registers" loading="lazy" />&lt;/p>
&lt;h3>代码分析&lt;span class="hx-absolute -hx-mt-20" id="代码分析-1">&lt;/span>
&lt;a href="#%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">testTypeConvert&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">i64bit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1844674407370955199&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i32bit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">i64bit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">short&lt;/span> &lt;span class="n">i16bit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">i32bit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">i8bit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">i16bit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%ld&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i64bit&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%ld&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i32bit&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i16bit&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i8bit&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gas" data-lang="gas">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">testTypeConvert&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movabsq&lt;/span> &lt;span class="no">$1844674407370955199&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">;‭00011001 10011001 10011001 10011001 10011001 10011001 10011001 10111111‬
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="nv">%eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 10011001 10011001 10011001 10111111‬ (2576980415)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movw&lt;/span> &lt;span class="nv">%ax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 10011001 10111111‬(39359)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movzwl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%eax&lt;/span> &lt;span class="c1">; 00000000 00000000 10011001 10111111‬ (zero extend)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movb&lt;/span> &lt;span class="nv">%al&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 10111111‬(191)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">nop&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">popq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ret&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>结论&lt;span class="hx-absolute -hx-mt-20" id="结论-1">&lt;/span>
&lt;a href="#%e7%bb%93%e8%ae%ba-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>int 类型的数据转化, 利用不同长度的寄存器. 比如 int 转 char 类型. 直接取 int 的最后 8 位. char 转 int ,对应的寄存器高位补上 3 个字节的 0.&lt;/p>
&lt;h1>array&lt;/h1>&lt;h2>C代码分析&lt;span class="hx-absolute -hx-mt-20" id="c代码分析">&lt;/span>
&lt;a href="#c%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>sumArray&lt;span class="hx-absolute -hx-mt-20" id="sumarray">&lt;/span>
&lt;a href="#sumarray" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">M&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">long&lt;/span> &lt;span class="nf">sumArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>sumMatrix&lt;span class="hx-absolute -hx-mt-20" id="summatrix">&lt;/span>
&lt;a href="#summatrix" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">sumMatrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">]){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(;&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(;&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>main&lt;span class="hx-absolute -hx-mt-20" id="main-1">&lt;/span>
&lt;a href="#main-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sum1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">22&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">33&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">44&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">55&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">matrix&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">},{&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">}};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sumArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sum1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sumMatrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">matrix&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h2>Asm 代码分析&lt;span class="hx-absolute -hx-mt-20" id="asm-代码分析">&lt;/span>
&lt;a href="#asm-%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>sumArray&lt;span class="hx-absolute -hx-mt-20" id="sumarray-1">&lt;/span>
&lt;a href="#sumarray-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gas" data-lang="gas">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">sumArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">long&lt;/span>&lt;span class="p">*,&lt;/span> &lt;span class="no">long&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rdi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; &amp;amp;a[0]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; length of a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; sum
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; i
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nl">.L3:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%eax&lt;/span> &lt;span class="c1">; i
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">cltq&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">cmpq&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; cmpq i, length 其实也就是 i - length
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">jle&lt;/span> &lt;span class="no">.L2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%eax&lt;/span> &lt;span class="c1">; i
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">cltq&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">leaq&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">(,&lt;/span>&lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rdx&lt;/span> &lt;span class="c1">; rdx = 0 + 8 * i
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; rax = &amp;amp;a[0]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">addq&lt;/span> &lt;span class="nv">%rdx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; rax = &amp;amp;a[0] + (0 + 8 * i), 地址增加 8 * i
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">%rax&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; rax = a[i]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="nv">%eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%edx&lt;/span> &lt;span class="c1">; edx = a[i]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%eax&lt;/span> &lt;span class="c1">; eax = sum
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">addl&lt;/span> &lt;span class="nv">%edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%eax&lt;/span> &lt;span class="c1">; eax = a[i] + sum
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="nv">%eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">addl&lt;/span> &lt;span class="no">$1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; i = i + 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">jmp&lt;/span> &lt;span class="no">.L3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">.L2:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%eax&lt;/span> &lt;span class="c1">; eax = sum
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">cltq&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">popq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ret&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;blockquote>
&lt;p>通过 a[i] 访问数组的方法, 与具体的数据类型有关&lt;br>
movl -8(%rbp), %eax ; i&lt;br>
cltq ; convert long(32 bit) to quad(64 bit)&lt;br>
leaq 0(,%rax,8), %rdx ; rdx = 0 + 8 * i , 比例寻址. 8 是比例因子,也就是数据类型的字节数,long 8 bytes.&lt;br>
movq -24(%rbp), %rax ; rax = &amp;amp;a[0]&lt;br>
addq %rdx, %rax ; rax = &amp;amp;a[0] + (0 + 8 * i), 地址增加 8 * i&lt;br>
movq (%rax), %rax ; rax = a[i]&lt;/p>
&lt;/blockquote>
&lt;h3>Asm sumMatrix&lt;span class="hx-absolute -hx-mt-20" id="asm-summatrix">&lt;/span>
&lt;a href="#asm-summatrix" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gas" data-lang="gas">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">sumMatrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">int&lt;/span> &lt;span class="p">(*)&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rdi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; &amp;amp;matrix[0][0]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; sum = 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">;i = 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">;j = 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; 循环体开始
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nl">.L9:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">cmpl&lt;/span> &lt;span class="no">$1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; i - 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">jg&lt;/span> &lt;span class="no">.L6&lt;/span> &lt;span class="c1">; i - 1 &amp;gt; 0 ;也就是 i = 2 时跳到 .L6, 退出循环. 否则进入内部循环.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nl">.L8:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">cmpl&lt;/span> &lt;span class="no">$2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; cmpl 2, j
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">jg&lt;/span> &lt;span class="no">.L7&lt;/span> &lt;span class="c1">; j - 2 &amp;gt; 0 ;也就是 j = 3 时,内部循环结束, 跳到 .L7. 改变 i, 进入下一轮循环
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%eax&lt;/span> &lt;span class="c1">; eax = i
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movslq&lt;/span> &lt;span class="nv">%eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rdx&lt;/span> &lt;span class="c1">; rdx = i
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rdx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; rax = i
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">addq&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; rax = i + i
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">addq&lt;/span> &lt;span class="nv">%rdx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; rax = i + (i + i)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">salq&lt;/span> &lt;span class="no">$2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; rax = 2 * 2 * 3 * i rax 算术左移 2 位
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rdx&lt;/span> &lt;span class="c1">; rdx = 12 * i
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; rax = &amp;amp;matrix[0][0]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">addq&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rdx&lt;/span> &lt;span class="c1">; rdx = &amp;amp;matrix[0][0] + 12 * i
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%eax&lt;/span> &lt;span class="c1">; eax = j
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">cltq&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">%rdx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%eax&lt;/span> &lt;span class="c1">; 4 * rax + rdx = &amp;amp;matrix[0][0] + 12 * i + 4 * j), 也就是 &amp;amp;matrix[i][j]. eax = matrix[i][j]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">addl&lt;/span> &lt;span class="nv">%eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; sum = sum + eax
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">addl&lt;/span> &lt;span class="no">$1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; j = j + 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">jmp&lt;/span> &lt;span class="no">.L8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">.L7:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">addl&lt;/span> &lt;span class="no">$1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; i = i + 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">jmp&lt;/span> &lt;span class="no">.L9&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">.L6:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%eax&lt;/span> &lt;span class="c1">; eax = sum
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">popq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ret&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;blockquote>
&lt;p>int matrix[i][j]&lt;br>
movl -8(%rbp), %eax ; eax = i&lt;br>
movslq %eax, %rdx ; rdx = i&lt;br>
movq %rdx, %rax ; rax = i&lt;br>
addq %rax, %rax ; rax = i + i&lt;br>
addq %rdx, %rax ; rax = i + (i + i)&lt;br>
salq $2, %rax ; rax = 2 * 2 * 3 * i rax 算术左移 2 位&lt;br>
movq %rax, %rdx ; rdx = 12 * i&lt;br>
movq -24(%rbp), %rax ; rax = &amp;amp;matrix[0][0]&lt;br>
addq %rax, %rdx ; rdx = &amp;amp;matrix[0][0] + 12 * i&lt;br>
movl -12(%rbp), %eax ; eax = j&lt;br>
cltq&lt;br>
movl (%rdx,%rax,4), %eax ; 4 * rax + rdx = 4 * j + &amp;amp;matrix[0][0] + 12 * i ), 也就是 &amp;amp;matrix[i][j]. eax = matrix[i][j]. sizeOf(int) = 4&lt;br>
在 main 中可知 matrix[0][0],matrix[0][1] &amp;hellip; matrix[1][1],matrix[1][2]顺序排列&lt;br>
当 i = 0, j = 0 时 4 * 0 + &amp;amp;matrix[0][0] + 12 * 0 = &amp;amp;matrix[0][0]&lt;br>
当 i = 0, j = 1 时 4 * 1 + &amp;amp;matrix[0][0] + 12 * 0 = &amp;amp;matrix[0][1]&lt;br>
当 i = 1, j = 0 时 4 * 0 + &amp;amp;matrix[0][0] + 12 * 1, 此时是 &amp;amp;matrix[0][0] + 12,&lt;br>
二维数组每一行的字节总数是: 3(每一行 3 个 int) * 4(int 数据大小), 此时的地址是 &amp;amp;matrix[1][0]. &lt;br>
C 语言中二维数组作为函数参数传递时, 一定要给出列的数目, 不需要行数. 因为根据列数和数据类型的大小,就能算出下一行的第一个数据偏移起始位置. 偏移量 = 列数 * sizeOf(Data type)&lt;/p>
&lt;/blockquote>
&lt;h3>Asm main&lt;span class="hx-absolute -hx-mt-20" id="asm-main">&lt;/span>
&lt;a href="#asm-main" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gas" data-lang="gas">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">main:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">subq&lt;/span> &lt;span class="no">$96&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rsp&lt;/span> &lt;span class="c1">; 分配栈空间
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="no">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; sum
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; sum1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="no">$11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; a[0]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="no">$22&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">56&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; a[1]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="no">$33&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">48&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; a[2]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="no">$44&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; a[3]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="no">$55&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; a[4]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">96&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; matrix[0][0]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">92&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; matrix[0][1]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">88&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; matrix[0][2]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">84&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; matrix[1][0]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; matrix[1][1]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">76&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; matrix[1][2]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">; call sumArray
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">leaq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; a[0] 的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%esi&lt;/span> &lt;span class="c1">; length of a, 第二个参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rdi&lt;/span> &lt;span class="c1">; a[0] 的地址作为第一个参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">call&lt;/span> &lt;span class="no">sumArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">long&lt;/span>&lt;span class="p">*,&lt;/span> &lt;span class="no">long&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 返回值复制给 sum
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">; call sumMatrix
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">leaq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">96&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; matrix[0][0] 的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rdi&lt;/span> &lt;span class="c1">; matrix[0][0] 的地址作为第一个参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">call&lt;/span> &lt;span class="no">sumMatrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">int&lt;/span> &lt;span class="p">(*)&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="nv">%eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 返回值复制给 sum1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">leave&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">ret&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;blockquote>
&lt;p>由 main 可以看出, 编译器对待数组 a , a 就是数组第一个元素的地址.&lt;/p>
&lt;/blockquote>
&lt;h2>gdb 分析 array&lt;span class="hx-absolute -hx-mt-20" id="gdb-分析-array">&lt;/span>
&lt;a href="#gdb-%e5%88%86%e6%9e%90-array" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>arrays.c&lt;span class="hx-absolute -hx-mt-20" id="arraysc">&lt;/span>
&lt;a href="#arraysc" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>gdb arrays&lt;span class="hx-absolute -hx-mt-20" id="gdb-arrays">&lt;/span>
&lt;a href="#gdb-arrays" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">stardust@os:container$ gcc -g arrays.c -o arrays
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">stardust@os:container$ gdb arrays
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">For help, &lt;span class="nb">type&lt;/span> &lt;span class="s2">&amp;#34;help&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Type &lt;span class="s2">&amp;#34;apropos word&amp;#34;&lt;/span> to search &lt;span class="k">for&lt;/span> commands related to &lt;span class="s2">&amp;#34;word&amp;#34;&lt;/span>...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reading symbols from arrays...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> &lt;span class="nb">break&lt;/span> main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Breakpoint &lt;span class="m">1&lt;/span> at 0x1149: file arrays.c, line 1.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Starting program: /home/stardust/Desktop/k8s/container/arrays
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Breakpoint 1, main &lt;span class="o">()&lt;/span> at arrays.c:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1&lt;/span> int main&lt;span class="o">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> next
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">2&lt;/span> int a&lt;span class="o">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>1,2,3&lt;span class="o">}&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>32767, 1431654832, 21845&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> next
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">3&lt;/span> int b&lt;span class="o">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>7,8,9,10&lt;span class="o">}&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>0, 0, 1431654496, 21845&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> next
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span> &lt;span class="k">return&lt;/span> 0&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>7, 8, 9, 10&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> ptype b &lt;span class="c1"># 数组 b 的类型为 int [4]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">type&lt;/span> &lt;span class="o">=&lt;/span> int &lt;span class="o">[&lt;/span>4&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> ptype a &lt;span class="c1"># 数组 a 的类型为 int [3]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">type&lt;/span> &lt;span class="o">=&lt;/span> int &lt;span class="o">[&lt;/span>3&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>1, 2, 3&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$5&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>7, 8, 9, 10&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print &lt;span class="p">&amp;amp;&lt;/span>a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$6&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>int &lt;span class="o">(&lt;/span>*&lt;span class="o">)[&lt;/span>3&lt;span class="o">])&lt;/span> 0x7fffffffdb14
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print &lt;span class="p">&amp;amp;&lt;/span>b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$7&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>int &lt;span class="o">(&lt;/span>*&lt;span class="o">)[&lt;/span>4&lt;span class="o">])&lt;/span> 0x7fffffffdb20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print sizeof&lt;span class="o">(&lt;/span>a&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$8&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">12&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print sizeof&lt;span class="o">(&lt;/span>b&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$9&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">16&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> x/12xb &lt;span class="p">&amp;amp;&lt;/span>a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x7fffffffdb14: 0x01 0x00 0x00 0x00 0x02 0x00 0x00 0x00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x7fffffffdb1c: 0x03 0x00 0x00 0x00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print a + &lt;span class="m">1&lt;/span> &lt;span class="c1"># 指针运算&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$10&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>int *&lt;span class="o">)&lt;/span> 0x7fffffffdb18
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print a + &lt;span class="m">2&lt;/span> &lt;span class="c1"># 指针运算&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$11&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>int *&lt;span class="o">)&lt;/span> 0x7fffffffdb1c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print x/4b a + &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> x/4xb a + &lt;span class="m">1&lt;/span> &lt;span class="c1"># 查看 a[1]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x7fffffffdb18: 0x02 0x00 0x00 0x00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> x/4xb a &lt;span class="c1"># 查看 a[0]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x7fffffffdb14: 0x01 0x00 0x00 0x00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print a&lt;span class="o">[&lt;/span>0&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$12&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print *&lt;span class="o">(&lt;/span>a + 1&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$13&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print a&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$14&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> ptype &lt;span class="p">&amp;amp;&lt;/span>a &lt;span class="c1"># &amp;amp;a 的类型是指向【 3 个 int 元素的数组 】的指针&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">type&lt;/span> &lt;span class="o">=&lt;/span> int &lt;span class="o">(&lt;/span>*&lt;span class="o">)[&lt;/span>3&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> ptype &lt;span class="p">&amp;amp;&lt;/span>b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">type&lt;/span> &lt;span class="o">=&lt;/span> int &lt;span class="o">(&lt;/span>*&lt;span class="o">)[&lt;/span>4&lt;span class="o">]&lt;/span> &lt;span class="c1"># &amp;amp;b 的类型是指向【 4 个 int 元素的数组 】的指针&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print a + &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$15&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>int *&lt;span class="o">)&lt;/span> 0x7fffffffdb18
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print &lt;span class="p">&amp;amp;&lt;/span>a + &lt;span class="m">1&lt;/span> &lt;span class="c1"># 下一个【 指向 3 个 int 元素的数组的指针 】的地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$16&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>int &lt;span class="o">(&lt;/span>*&lt;span class="o">)[&lt;/span>3&lt;span class="o">])&lt;/span> 0x7fffffffdb20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> print &lt;span class="p">&amp;amp;&lt;/span>b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$18&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>int &lt;span class="o">(&lt;/span>*&lt;span class="o">)[&lt;/span>4&lt;span class="o">])&lt;/span> 0x7fffffffdb20&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h1>struct&lt;/h1>&lt;blockquote>
&lt;p>A struct in the C programming language (and many derivatives) is a composite data type (or record) declaration that defines a physically grouped list of variables to be placed under one name in a block of memory, allowing the different variables to be accessed via a single pointer, or the struct declared name which returns the same address.&lt;/p>
&lt;/blockquote>
&lt;h2>Code Analysis&lt;span class="hx-absolute -hx-mt-20" id="code-analysis">&lt;/span>
&lt;a href="#code-analysis" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>C&lt;span class="hx-absolute -hx-mt-20" id="c">&lt;/span>
&lt;a href="#c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">Student&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">score&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">Student&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">;&lt;/span> &lt;span class="err">结构体指针作为参数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">testStruct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Student&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">score&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">;&lt;/span> &lt;span class="err">返回结构体&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Student&lt;/span> &lt;span class="nf">buildStruct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">score&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Student&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">score&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">score&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Student&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Student&lt;/span> &lt;span class="n">ss&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">score&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">testStruct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ss&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">buildStruct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">22&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">33&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Asm&lt;span class="hx-absolute -hx-mt-20" id="asm">&lt;/span>
&lt;a href="#asm" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gas" data-lang="gas">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">testStruct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">Student&lt;/span>&lt;span class="p">*):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rdi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; s 的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="no">$10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">%rax&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; s-&amp;gt;id = 10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="no">$100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rax&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; s-&amp;gt;score = 100
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="no">$1000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rax&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; s-&amp;gt;age = 1000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">nop&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">popq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ret&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">buildStruct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">long&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rdi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; main 中隐性变量 ss 的地址(rbp(main) - 96)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; id
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rdx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; score
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rcx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; age
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rdx&lt;/span> &lt;span class="c1">; id
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rdx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">%rax&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rdx&lt;/span> &lt;span class="c1">; score
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rdx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rax&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rdx&lt;/span> &lt;span class="c1">; age
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rdx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rax&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">nop&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; main 中隐性变量 ss 的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">popq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ret&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">main:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">subq&lt;/span> &lt;span class="no">$96&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rsp&lt;/span> &lt;span class="c1">; 分配栈空间
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="no">$1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; id
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="no">$10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; score
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="no">$100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; age
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">leaq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; 结构体起始地址,也就是第一个字节的内存地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rdi&lt;/span> &lt;span class="c1">; 这个就类似 Java 中的 this 指针了
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">call&lt;/span> &lt;span class="no">testStruct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">Student&lt;/span>&lt;span class="p">*)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">leaq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">96&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; 隐性的变量 ss 起始地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$33&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%ecx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">movl&lt;/span> &lt;span class="no">$22&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%edx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%esi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rdi&lt;/span> &lt;span class="c1">; 隐形的参数, 像不像 Java 里的 this 啊. 编译器动的手脚.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">call&lt;/span> &lt;span class="no">buildStruct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">long&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">96&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; ss.id
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">88&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rdx&lt;/span> &lt;span class="c1">; ss.score
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">movq&lt;/span> &lt;span class="nv">%rdx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">56&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; ss.age
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">48&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">leave&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ret&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;blockquote>
&lt;p>结构体使用的是一块连续的内存地址. 结构体指针也就是结构体第一个字节的地址.&lt;/p>
&lt;/blockquote>
&lt;h1>Variable Shadowing&lt;/h1>&lt;blockquote>
&lt;p>代码块、块级变量&lt;/p>
&lt;/blockquote>
&lt;h2>C 代码&lt;span class="hx-absolute -hx-mt-20" id="c-代码">&lt;/span>
&lt;a href="#c-%e4%bb%a3%e7%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">test_variable_shadow&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 代码块开始
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 代码块结束
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">10000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h2>汇编代码&lt;span class="hx-absolute -hx-mt-20" id="汇编代码">&lt;/span>
&lt;a href="#%e6%b1%87%e7%bc%96%e4%bb%a3%e7%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gas" data-lang="gas">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">test_variable_shadow&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; int a = 10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; int a = 100
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">addl&lt;/span> &lt;span class="no">$1000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="nv">%eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; int b = a + 1000 代码块里的 a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">addl&lt;/span> &lt;span class="no">$10000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">movl&lt;/span> &lt;span class="nv">%eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; int c = a + 10000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">nop&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">popq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ret&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/c-variable-shadow.png" alt="c-variable-shadow" loading="lazy" />&lt;/p>
&lt;h2>汇编代码分析&lt;span class="hx-absolute -hx-mt-20" id="汇编代码分析">&lt;/span>
&lt;a href="#%e6%b1%87%e7%bc%96%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/variable_shadowing.png" alt="块级变量隐藏" loading="lazy" />&lt;/p>
&lt;h1>funcation pointer&lt;/h1>&lt;blockquote>
&lt;p>A function pointer can be declared as: (return type of function) (*name of pointer) (type of function arguments)&lt;/p>
&lt;/blockquote>
&lt;h2>C 代码&lt;span class="hx-absolute -hx-mt-20" id="c-代码-1">&lt;/span>
&lt;a href="#c-%e4%bb%a3%e7%a0%81-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;stdio.h&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">fptr&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// Function pointer
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">fptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Assign address to function pointer
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h2>汇编分析&lt;span class="hx-absolute -hx-mt-20" id="汇编分析">&lt;/span>
&lt;a href="#%e6%b1%87%e7%bc%96%e5%88%86%e6%9e%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gas" data-lang="gas">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">int&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="nv">%edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="nv">%esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%edx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">addl&lt;/span> &lt;span class="nv">%edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">popq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ret&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">main:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span> &lt;span class="c1">; 保存调用者的 rbp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span> &lt;span class="c1">; 开辟 main 的栈帧
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">subq&lt;/span> &lt;span class="no">$16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rsp&lt;/span> &lt;span class="c1">; 分配栈帧空间
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="no">$add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">int&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 将 add(int, int) 第一条指令的地址保存在 rbp - 8 这个位置处
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%esi&lt;/span> &lt;span class="c1">; 从右往左保存第一个参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%edi&lt;/span> &lt;span class="c1">; 从右往左保存第二个参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">call&lt;/span> &lt;span class="no">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 正常的 call 调用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; 将 add(int, int) 的地址复制到 rax 寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%esi&lt;/span> &lt;span class="c1">; 从右往左保存第一个参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%edi&lt;/span> &lt;span class="c1">; 从右往左保存第二个参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">call&lt;/span> &lt;span class="p">*&lt;/span>&lt;span class="nv">%rax&lt;/span> &lt;span class="c1">; 通过函数指针调用函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">leave&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ret&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/function-pointer.png" alt="函数指针" loading="lazy" />&lt;/p>
&lt;h1>enum&lt;/h1>&lt;blockquote>
&lt;p>编译器在背后搞鬼，自动为每一个 enum 常量进行编号。&lt;/p>
&lt;/blockquote>
&lt;h2>c 代码&lt;span class="hx-absolute -hx-mt-20" id="c-代码-2">&lt;/span>
&lt;a href="#c-%e4%bb%a3%e7%a0%81-2" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="n">day&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="n">monday&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tuesday&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">wednesday&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">thursday&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">friday&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">saturday&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sunday&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="n">color&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RED&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">YELLOW&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GREEN&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">enum&lt;/span> &lt;span class="n">day&lt;/span> &lt;span class="n">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">friday&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">enum&lt;/span> &lt;span class="n">color&lt;/span> &lt;span class="n">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GREEN&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h2>汇编分析&lt;span class="hx-absolute -hx-mt-20" id="汇编分析-1">&lt;/span>
&lt;a href="#%e6%b1%87%e7%bc%96%e5%88%86%e6%9e%90-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gas" data-lang="gas">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">main:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; friday 编号为 4，默认从 0 开始编号。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; GREEN 编号为 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">popq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ret&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/c-enum.png" alt=" 枚举" loading="lazy" />&lt;/p>
&lt;h1>references&lt;/h1>&lt;ol>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Pointer_%28computer_programming%29" target="_blank" rel="noopener">pointer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/29790175/assembly-x86-leave-instruction/29790275" target="_blank" rel="noopener">lea instruction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aaronbloomfield.github.io/pdr/book/x86-64bit-ccc-chapter.pdf" target="_blank" rel="noopener">x86 c call convention&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cs.auckland.ac.nz/references/macvax/op-codes/Instructions/movz.html" target="_blank" rel="noopener">opcode-movz&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://faydoc.tripod.com/cpu/movsd.htm" target="_blank" rel="noopener">movsd&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.geeksforgeeks.org/pass-2d-array-parameter-c/" target="_blank" rel="noopener">pass-2d-array-parameter-c&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Variable_shadowing" target="_blank" rel="noopener">Variable Shadowing&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.thegeekstuff.com/2012/01/advanced-c-pointers" target="_blank" rel="noopener">function pointer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.recurse.com/blog/5-learning-c-with-gdb" target="_blank" rel="noopener">5-learning-c-with-gdb&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/483372519" target="_blank" rel="noopener">用 gdb 学 C 语言&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>asm-how-x86-64-arguments-pass</title><link>https://cloudedseal.github.io/blog/asm-how-x86-64-arguments-pass/</link><pubDate>Mon, 24 Jun 2019 09:52:27 +0800</pubDate><guid>https://cloudedseal.github.io/blog/asm-how-x86-64-arguments-pass/</guid><description>
&lt;h3>x86-64 下函数参数传递, 汇编层面分析&lt;span class="hx-absolute -hx-mt-20" id="x86-64-下函数参数传递-汇编层面分析">&lt;/span>
&lt;a href="#x86-64-%e4%b8%8b%e5%87%bd%e6%95%b0%e5%8f%82%e6%95%b0%e4%bc%a0%e9%80%92-%e6%b1%87%e7%bc%96%e5%b1%82%e9%9d%a2%e5%88%86%e6%9e%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;blockquote>
&lt;p>To pass parameters to the subroutine, we put up to six of them into registers (in order: rdi, rsi, rdx, rcx, r8, r9).&lt;br>
If there are more than six parameters to the subroutine, then push the rest onto the stack in reverse order (i.e. last parameter first)&lt;br>
– since the stack grows down, the first of the extra parameters (really the seventh parameter) parameter will be stored at the lowest address (this inversion of parameters was historically used to allow functions to be passed a variable number of parameters).&lt;/p>
&lt;/blockquote>
&lt;h1>代码分析&lt;/h1>&lt;h2>C main&lt;span class="hx-absolute -hx-mt-20" id="c-main">&lt;/span>
&lt;a href="#c-main" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">testArgs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Asm main&lt;span class="hx-absolute -hx-mt-20" id="asm-main">&lt;/span>
&lt;a href="#asm-main" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>gcc -o main main.c&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gas" data-lang="gas">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">main:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">subq&lt;/span> &lt;span class="no">$16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rsp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">;result
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">pushq&lt;/span> &lt;span class="no">$8&lt;/span> &lt;span class="c1">; 最后一个参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">pushq&lt;/span> &lt;span class="no">$7&lt;/span> &lt;span class="c1">; 倒数第二个参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%r9d&lt;/span> &lt;span class="c1">; 第六个参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%r8d&lt;/span> &lt;span class="c1">; 第五个参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%ecx&lt;/span> &lt;span class="c1">; 第四个参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%edx&lt;/span> &lt;span class="c1">; 第三个参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%esi&lt;/span> &lt;span class="c1">; 第二个参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%edi&lt;/span> &lt;span class="c1">; 第一个参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">call&lt;/span> &lt;span class="no">testArgs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">long&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">addq&lt;/span> &lt;span class="no">$16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rsp&lt;/span> &lt;span class="c1">; 回收分配的栈空间
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="nv">%eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">leave&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ret&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>C testArgs&lt;span class="hx-absolute -hx-mt-20" id="c-testargs">&lt;/span>
&lt;a href="#c-testargs" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">testArgs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">a1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">a2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">a3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">a4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">a5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">a6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">a7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">a8&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">a2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">a3&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">a4&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="n">a5&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">a6&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">a7&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">a8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Asm testArgs&lt;span class="hx-absolute -hx-mt-20" id="asm-testargs">&lt;/span>
&lt;a href="#asm-testargs" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;pre>&lt;code>testArgs(long, long, long, long, long, long, long, long):
pushq %rbp
movq %rsp, %rbp
movq %rdi, -24(%rbp) ; a1 栈底
movq %rsi, -32(%rbp) ; a2
movq %rdx, -40(%rbp) ; a3
movq %rcx, -48(%rbp) ; a4
movq %r8, -56(%rbp) ; a5
movq %r9, -64(%rbp) ; a6
movq $0, -8(%rbp) ; sum
movq -24(%rbp), %rdx ; a1
movq -32(%rbp), %rax ; a2
addq %rax, %rdx ; rdx = a1 &amp;#43; a2
movq -40(%rbp), %rax ; a3
addq %rax, %rdx
movq -48(%rbp), %rax ; a4
addq %rax, %rdx
movq -56(%rbp), %rax ; a5
addq %rax, %rdx
movq -64(%rbp), %rax ; a6
addq %rax, %rdx
movq 16(%rbp), %rax ; a7，其实是到 main 的栈帧里取的,main 准备的参数,因为 rbp 就是 stack frame 的栈底
addq %rax, %rdx
movq 24(%rbp), %rax ; a8，其实是到 main 的栈帧里取的,main 准备的参数
addq %rdx, %rax
movq %rax, -8(%rbp) ; sum = rax
movq -8(%rbp), %rax ; rax = sum 也就是返回值
popq %rbp
ret&lt;/code>&lt;/pre>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;blockquote>
&lt;p>综上可知，编译器默认会将所有的参数复制到栈上。&lt;/p>
&lt;/blockquote>
&lt;h2>栈帧分析&lt;span class="hx-absolute -hx-mt-20" id="栈帧分析">&lt;/span>
&lt;a href="#%e6%a0%88%e5%b8%a7%e5%88%86%e6%9e%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/x86-64-arguments-pass.png" alt="x86-64-arguments-pass" loading="lazy" />&lt;br>
#(x86-64-arguments-pass) 栈顶在下方&lt;/p>
&lt;blockquote>
&lt;p>上图是执行完 testArgs 前两句汇编的栈帧状态图.&lt;br>
分析:
testArgs 中 &lt;code>movq 16(%rbp), %rax&lt;/code> ; 将 rbp + 16 地址处的数值(参数 a7)复制到 rax&lt;br>
rbp + 16 的原因是: 参数 a7 是 main 准备的, 属于 main 的栈帧.&lt;br>
16 Bytes 包括 8 Bytes 的 Return address(main 函数中的 call 指令压入的 call 指令下一条指令的地址)&lt;br>
和 8 Bytes 的 main 的 rbp(testArgs 函数中第一条指令: pushq %rbp).&lt;/p>
&lt;/blockquote>
&lt;h2>Reference&lt;span class="hx-absolute -hx-mt-20" id="reference">&lt;/span>
&lt;a href="#reference" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ol>
&lt;li>&lt;a href="http://web.stanford.edu/class/cs107/guide/x86-64.html" target="_blank" rel="noopener">callee-caller&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>asm-how-x86-function-execute</title><link>https://cloudedseal.github.io/blog/asm-how-x86-function-execute/</link><pubDate>Tue, 28 May 2019 19:32:16 +0800</pubDate><guid>https://cloudedseal.github.io/blog/asm-how-x86-function-execute/</guid><description>
&lt;blockquote>
&lt;p>前一阵子去看 java 虚拟机原理, 忽然痛悟到虚拟机也是机器啊, 呵呵也就是个软件而已. 看到 java 方法调用太复杂. 字节码那一套又不太熟悉, 还不如直接去看 C 编译后的汇编代码.
目的: 搞明白 X86 架构下函数到底是怎么调用执行的.
这其实就是 Application Binary Interface 之 Function Calling Conventions。&lt;/p>
&lt;/blockquote>
&lt;h1>assembly syntax for X86&lt;/h1>&lt;h2>gas (gnu assembler syntax), 也就是 AT&amp;amp;T 风格.&lt;span class="hx-absolute -hx-mt-20" id="gas-gnu-assembler-syntax-也就是-att-风格">&lt;/span>
&lt;a href="#gas-gnu-assembler-syntax-%e4%b9%9f%e5%b0%b1%e6%98%af-att-%e9%a3%8e%e6%a0%bc" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>本文采用该风格.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">swap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pushq&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">movq&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">movl&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">rbp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">movl&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">rbp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">movl&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">movl&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">rbp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">movl&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">movl&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">rbp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">movl&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">eax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">movl&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">rbp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">nop&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">popq&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ret&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h2>intel syntax&lt;span class="hx-absolute -hx-mt-20" id="intel-syntax">&lt;/span>
&lt;a href="#intel-syntax" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;pre>&lt;code>swap(int, int):
push rbp
mov rbp, rsp
mov DWORD PTR [rbp-20], edi
mov DWORD PTR [rbp-24], esi
mov eax, DWORD PTR [rbp-20]
mov DWORD PTR [rbp-4], eax
mov eax, DWORD PTR [rbp-24]
mov DWORD PTR [rbp-20], eax
mov eax, DWORD PTR [rbp-4]
mov DWORD PTR [rbp-24], eax
nop
pop rbp
ret&lt;/code>&lt;/pre>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h1>instruction suffixes&lt;/h1>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>缩写&lt;/th>
&lt;th>全称&lt;/th>
&lt;th>位数&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>b&lt;/td>
&lt;td>byte&lt;/td>
&lt;td>8bit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>w&lt;/td>
&lt;td>word&lt;/td>
&lt;td>16bit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>l&lt;/td>
&lt;td>long&lt;/td>
&lt;td>32bit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>q&lt;/td>
&lt;td>quad&lt;/td>
&lt;td>64bit&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1>addressing mode(寻址模式)&lt;/h1>&lt;blockquote>
&lt;p>CPU 寻址方式, 也就是拿到数据的方式.&lt;/p>
&lt;/blockquote>
&lt;h2>direct addressing(直接寻址)&lt;span class="hx-absolute -hx-mt-20" id="direct-addressing直接寻址">&lt;/span>
&lt;a href="#direct-addressing%e7%9b%b4%e6%8e%a5%e5%af%bb%e5%9d%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>movb $0x05,%al&lt;br>
表示为:R[al] = 0x05;&lt;br>
将立即数 0x05(1 byte) 复制到寄存器 al&lt;/p>
&lt;/blockquote>
&lt;h2>indirect addressing(间接寻址)&lt;span class="hx-absolute -hx-mt-20" id="indirect-addressing间接寻址">&lt;/span>
&lt;a href="#indirect-addressing%e9%97%b4%e6%8e%a5%e5%af%bb%e5%9d%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>间接寻址也就是到内存里去找&lt;/p>
&lt;/blockquote>
&lt;h3>register to memory&lt;span class="hx-absolute -hx-mt-20" id="register-to-memory">&lt;/span>
&lt;a href="#register-to-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;blockquote>
&lt;p>movl %eax, -4(%ebp)&lt;br>
表示为: mem[R[ebp]-4] = R[eax];&lt;br>
将寄存器 eax 里面的值复制到寄存器 ebp 的值减去 4 指向的内存地址处(也就是 R[ebp] -4 的值是一个内存地址).&lt;br>
通过寄存器指向了内存地址, 是不是很熟悉的指针啊, 对, 就是指针. C 语言的指针就是这么玩的啊!&lt;/p>
&lt;/blockquote>
&lt;h3>memory to register&lt;span class="hx-absolute -hx-mt-20" id="memory-to-register">&lt;/span>
&lt;a href="#memory-to-register" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;blockquote>
&lt;p>movl -4(%ebp), %eax&lt;br>
%eax 表示为: R[eax] = mem[R[ebp] -4];&lt;br>
将寄存器 esp 的值减去 4 的值指向的内存地址处存放的值, 复制到寄存器 eax&lt;/p>
&lt;/blockquote>
&lt;h1>program counter for stored program&lt;/h1>&lt;blockquote>
&lt;p>PC = PC + \(instruction size in bytes\)&lt;br>
(instruction) (src1) (src2) (dst)&lt;br>
In most processors, the PC is &lt;code>incremented after fetching&lt;/code> an instruction,
and holds the memory address of (&amp;ldquo;points to&amp;rdquo;) the next instruction that would be executed.&lt;br>
这里就用到了指令周期(instruction cycle)这个概念了, fetch, decode, execute.
注意到 PC 这个寄存器, 在 CPU fetch 了一条指令后就自动增加了.
(In a processor where the incrementation precedes the fetch, the PC points to the current instruction being executed.)&lt;br>
同样的在 CPU fetch 一条指令之前, PC 指向当前正在执行的指令.&lt;br>
注意: 不直接操作 ip(instruction pointer) 也叫 pc(program counter) 这个寄存器, 如果这个能被编译器直接操作的话, 就完全想跳到哪执行就跳到哪执行了.
实际上 &lt;code>call&lt;/code> 和 &lt;code>ret&lt;/code> 指令就是在间接操作 &lt;code>pc&lt;/code> 这个寄存器.
call 带来的效果之一就是 push %rip, ret 带来的效果之一就是 pop %rip. 两者具有对称作用啊!&lt;/p>
&lt;/blockquote>
&lt;h1>change control flow(改变控制流)&lt;/h1>&lt;h2>&lt;code>jmp&lt;/code> label&lt;span class="hx-absolute -hx-mt-20" id="jmp-label">&lt;/span>
&lt;a href="#jmp-label" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>When a jump instruction executes (in the last step of the machine cycle), it puts a new address into the PC. Now the fetch at the top of the next machine cycle fetches the instruction at that new address. Instead of executing the instruction that follows the jump instruction in memory, the processor &amp;ldquo;jumps&amp;rdquo; to an instruction somewhere else in memory.&lt;br>
jmp 指令把 label 所在的地址, 复制给 pc 寄存器. 这就改变了程序的控制流. 然后程序流程就脱离了原来的执行流. 和 call label 很相似, 对, call 指令作用之一就包括了一个隐式的 jmp label.
函数调用也就是把控制权交给了被调用者. 但是控制权最后要回到调用函数那里. 只不过 call 指令在函数交出控制权之前还多干了一件事, 就是把此时的 pc 值 push 到了栈里.&lt;/p>
&lt;/blockquote>
&lt;h1>stack management&lt;/h1>&lt;h2>stack pointer&lt;span class="hx-absolute -hx-mt-20" id="stack-pointer">&lt;/span>
&lt;a href="#stack-pointer" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>A stack register is a computer central processor register whose purpose is to keep track of a call stack.&lt;br>
push pop 指令操作的是 sp(stack pointer) 这个寄存器.&lt;br>
栈底地址: 由bp(base pointer) 保存&lt;br>
栈分配空间: sp 减去需要的地址空间大小(所谓的栈向下生长);&lt;br>
栈回收空间: sp 加上需要的地址空间大小(所谓的栈向上收缩);(PS: 相当无聊的话)&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/x86-64-stack.png" alt="x86-64-stack" loading="lazy" /> #(x86-64-stack)&lt;/p>
&lt;h2>&lt;code>pushl&lt;/code> %eax&lt;span class="hx-absolute -hx-mt-20" id="pushl-eax">&lt;/span>
&lt;a href="#pushl-eax" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>push value of %eax onto stack
The push instruction places its operand onto the top of the hardware supported stack in memory. Specifically, push first decrements ESP by 4, then places its operand into the contents of the 32-bit location at address [ESP]. ESP (the stack pointer) is decremented by push since the x86 stack grows down - i.e. the stack grows from high addresses to lower addresses.&lt;br>
这里可以看到 push 的是多字节的数据, 那就涉及到怎样排列多字节数据的问题了. 也就是所谓的字节序的问题. X86 采用所谓的小端, 也就是把数字按照顺序放到栈里, 数字的高位放在了比较大的内存地址那里.(这里不做讨论)
作用等价于&lt;/p>
&lt;/blockquote>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">subl&lt;/span> &lt;span class="no">$4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%esp&lt;/span> &lt;span class="c1">;分配4个字节的空间, 所谓的栈向下生长
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">movl&lt;/span> &lt;span class="nv">%eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">%esp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="err">;将&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="err">的值复制到&lt;/span> &lt;span class="no">esp&lt;/span> &lt;span class="err">指到的内存地址处&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h2>&lt;code>popl&lt;/code> %eax&lt;span class="hx-absolute -hx-mt-20" id="popl-eax">&lt;/span>
&lt;a href="#popl-eax" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>pop %eax off stack
The pop instruction removes the 4-byte data element from the top of the hardware-supported stack into the specified operand (i.e. register or memory location). It first moves the 4 bytes located at memory location [ESP] into the specified register or memory location, and then increments SP by 4.
作用等价于&lt;/p>
&lt;/blockquote>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">movl&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">%esp&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="nv">%eax&lt;/span> &lt;span class="c1">;将 esp 指向的内存地址里面的值复制到 eax
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">addl&lt;/span> &lt;span class="no">$4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">%esp&lt;/span> &lt;span class="err">;回收空间&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h1>function call and return&lt;/h1>&lt;h2>&lt;code>call&lt;/code> &lt;label>&lt;span class="hx-absolute -hx-mt-20" id="call">&lt;/span>
&lt;a href="#call" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>The call instruction first pushes the current code location onto the hardware supported stack in memory(see the push instruction for details), and then performs an unconditional jump to the code location indicated by the label operand. Unlike the simple jump instructions, the call instruction saves the location to return to when the subroutine completes.&lt;br>
注意到 CPU 在 fetch 到 call 指令后, PC 就已经自动加 1 了. 此时的 PC 值也就是所谓的函数返回地址.
call 指令做了两件事, 第一件事: 将此时的 ip 保存到栈中, 第二件事: jump 到 label 位置, 此时已经改变了 PC 的值.&lt;br>
call label
作用等价于&lt;/p>
&lt;/blockquote>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rip&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="no">jmp&lt;/span> &lt;span class="no">label&lt;/span> &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h2>&lt;code>ret&lt;/code>&lt;span class="hx-absolute -hx-mt-20" id="ret">&lt;/span>
&lt;a href="#ret" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>The ret instruction implements a subroutine return mechanism. This instruction first pops a code location off the hardware supported in-memory stack (也就是 call 指令压入栈中的 PC, 将这个值复制到 PC 寄存器)(see the pop instruction for details). It then performs an unconditional jump to the retrieved code location.&lt;br>
所以啊, call(含有一个 push 操作) 和 ret(含有一个 pop 操作) 指令, 这是实现控制流跳转和恢复的关键. 也间接操作了 sp 这个寄存器. 硬件实现的功能, 不需要过多的计较.&lt;br>
ret&lt;/p>
&lt;/blockquote>
&lt;p>作用等价于:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gas" data-lang="gas">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">popq&lt;/span> &lt;span class="nv">%rip&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h1>call stack&lt;/h1>&lt;blockquote>
&lt;p>In computer science, a call stack is a stack data structure that stores information about the active subroutines of a computer program. This kind of stack is also known as an execution stack, program stack, control stack, run-time stack, or machine stack, and is often shortened to just &amp;ldquo;the stack&amp;rdquo;.&lt;br>
A call stack is used for several related purposes, but the main reason for having one is to keep track of the point to which each active subroutine should return control when it finishes executing.&lt;br>
An active subroutine is one that has been called but is yet to complete execution after which control should be handed back to the point of call. Such activations of subroutines may be nested to any level (recursive as a special case), hence the stack structure.&lt;/p>
&lt;/blockquote>
&lt;h2>example&lt;span class="hx-absolute -hx-mt-20" id="example">&lt;/span>
&lt;a href="#example" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>for example, a subroutine DrawSquare calls a subroutine DrawLine from four different places, DrawLine must know where to return when its execution completes.&lt;br>
To accomplish this, the address following the instruction that jumps to DrawLine, the return address, is pushed onto the call stack with each call.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/callstack-layout-for-upward-growing-stacks.png" alt="callstack-layout-for-upward-growing-stacks" loading="lazy" />&lt;br>
#(callstack-layout-for-upward-growing-stacks)&lt;/p>
&lt;h1>code analysis&lt;/h1>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">swap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">tmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; 64 bit 机器 , AT&amp;amp;T 风格的汇编
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">swap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">int&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span> &lt;span class="c1">; 上一个栈帧(main)的基地址压栈 等价于 subq $8, %rsp; movq %rbp,(%rsp)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span> &lt;span class="c1">; 开辟新的函数栈帧, 也就是形成一个新的栈的基地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="nv">%edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 参数 a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="nv">%esi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 参数 b
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%eax&lt;/span> &lt;span class="c1">; 把 a 赋值给 %eax
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="nv">%eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 把 %eax (a)赋值给 %rbp - 4(a) 的地址处
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%eax&lt;/span> &lt;span class="c1">; 把 b 赋值给 % eax（b）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="nv">%eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 把 %eax (b) 赋值给 %rbp - 20（b） 的地址处,完成 b 的交换
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">%eax&lt;/span> &lt;span class="c1">; 把 %rbp - 4 地址处的值(a) 赋值给 %eax (a)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="nv">%eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">%rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; 把 %eax (a) 赋值给 %rbp - 24 的地址处, 完成 a 的交换
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">nop&lt;/span> &lt;span class="c1">; 延时
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">popq&lt;/span> &lt;span class="nv">%rbp&lt;/span> &lt;span class="c1">; 等价于 movq (%rsp), %rbp ; 上一个函数栈帧(main)的基地址恢复; addq $8, %rsp ; 上一个函数的 %rsp 恢复
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">ret&lt;/span> &lt;span class="err">;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">popq&lt;/span> &lt;span class="nv">%rip.&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="err">恢复&lt;/span> &lt;span class="no">main&lt;/span> &lt;span class="err">的&lt;/span> &lt;span class="no">pc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">swap&lt;/span> &lt;span class="err">这条指令压入的&lt;/span> &lt;span class="no">pc&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">jmp&lt;/span> &lt;span class="err">%&lt;/span> &lt;span class="no">rip&lt;/span> &lt;span class="err">处继续执行&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="err">也就是&lt;/span> &lt;span class="no">movl&lt;/span> &lt;span class="no">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%eax&lt;/span> &lt;span class="err">这条指令的地址&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">swap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">main:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%esi&lt;/span> &lt;span class="c1">; 由 caller(main 函数) 准备函数参数 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%edi&lt;/span> &lt;span class="c1">; 由 caller(main 函数) 准备函数参数 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">call&lt;/span> &lt;span class="no">swap&lt;/span> &lt;span class="c1">; 在 CPU fetch 了 call 指令后, pc 已经指向了下一条指令, 也就是 movl $0, %eax 这条指令. 此时的 call 指令完成了两件事, 第一件事: 将 pc(old) 压入到栈中(swap 函数 ret 指令(函数返回)就是把这个 pc(old) pop 到 pc 这个寄存器, CPU 就能接着执行 movl $0, %eax 这条指令了), 第二件事: jump 到swap的地址, 开始执行swap的代码.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">movl&lt;/span> &lt;span class="no">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%eax&lt;/span> &lt;span class="c1">; 返回值 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">popq&lt;/span> &lt;span class="nv">%rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ret&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h1>C compare to Assembly&lt;/h1>&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/c-swap-to-asm-swap.png" alt="c-swap-to-asm-swap" loading="lazy" />&lt;/p>
&lt;h1>asm execute graph&lt;/h1>&lt;p>&lt;img src="https://github.com/stardustman/pictures/raw/main/img/asm-execute-graph.png" alt="asm-execute-graph" loading="lazy" />&lt;/p>
&lt;blockquote>
&lt;p>注意: 示意图里面的是 64 bit 的汇编代码.&lt;br>
注意: 所有的 push 和 pop 指令都会改变 sp 寄存器的值.&lt;br>
图1 main 函数执行完 pushq %rbp 和 movq %rsp, %rbp, 开辟 main 函数的栈帧.&lt;br>
图2 main 函数执行 call swap. call 指令两个作用: 1. 将 movl $0, %eax 这条指令的地址(X)压入栈中. 2. jump 到 swap 的地址.&lt;br>
图3 是 swap 函数的栈帧, 此时新函数的栈帧 rsp 和 rbp 指向的是相同的内存地址.&lt;br>
图4 所有的 mov 使用的内存地址, 都是通过 rbp 来偏移得到, rbp 的值并没有发生改变.&lt;br>
图5 执行完 popq %rsp, 恢复 main 函数的栈基址(rbp), 也就是和图1 一样.&lt;br>
图6 执行完 ret 恢复为 main 函数的栈帧(这里主要是 rsp, rbp, pc, 个人理解把 pc 视为栈帧的一部分, 因为函数调用控制权发生转移, 幕后也离不开 pc 这个寄存器的变化).&lt;br>
ret 的作用等价于 popq %rip. 但是无法直接操作 ip(pc) 这个寄存器.&lt;br>
也就相当于间接改变 ip. 此时 pc 已被 ret 指令恢复成了 X. (此时实际上控制权已经回到 main 函数了), 接下来就是继续执行 main 函数的代码.&lt;br>
其实 swap 函数的栈帧已经被销毁了. 也就是再也访问不到 swap 函数里的变量了. 这就是 C 语言里的所谓的本地变量的本质.&lt;br>
注意: 图1 和 图6 , 图2 和 图5 完全一样, 这不是有意为之, 按照 X86 的函数调用机制就是这样的. &lt;br>
在被调用函数(swap)执行 popq % rbp, 这条指令就是要恢复调用函数(main)的 rbp, 执行 ret 这条指令就是要恢复调用函数(main)的下一条指令的地址. &lt;br>
也就是将 pc 的值恢复为 X, 这样就可以接着执行了嘛. 也就是所谓的恢复调用者(main)的栈帧.&lt;br>
也就是 main 函数调用 swap 函数(call 指令)保留 main 的状态(也就是 main 函数的 rbp 和 pc), swap 执行到最后(popq, ret)负责恢复现场(也就是恢复 main 函数的 rbp 和 pc). call 和 ret 指令的也分别有 push %rip 和 pop %rip 的作用. 很对称的操作!&lt;/p>
&lt;/blockquote>
&lt;h1>bombs&lt;/h1>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gas" data-lang="gas">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">pushq&lt;/span> &lt;span class="nv">%rbp&lt;/span> &lt;span class="c1">; 保留上一个函数(也就是调用者)的栈基址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">movq&lt;/span> &lt;span class="nv">%rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rbp&lt;/span> &lt;span class="err">;&lt;/span> &lt;span class="err">新函数的栈基址&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="err">一个新的栈帧&lt;/span> &lt;span class="no">sp&lt;/span> &lt;span class="err">和&lt;/span> &lt;span class="no">bp&lt;/span> &lt;span class="err">指向的是同一个地址&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;blockquote>
&lt;p>一个所谓的栈帧(stack frame)就是由 sp(stack pointer) 和 bp(base pointer) 这两个寄存器来维护的。&lt;br>
在编译器没有开启优化情况下，这两句会出现在每一个函数的开始, 那么问题来了 main 函数里面保留的是哪一个调用函数的栈基址呢?&lt;br>
个人推测, 不一定正确, 我们知道创建进程(线程)是 OS 内核的功能, 当然进程销毁也是内核的功能.&lt;br>
内核同样维护着属于内核空间的栈帧, 当进程创建完毕后, 我们写的 C 代码应该是被内核里的函数调用的, 这样的话 main 里面 pushq %rbp 应该是保留的内核函数的栈基址. 这样 main 的 ret 返回后就能接着执行内核函数里面的逻辑了. (估计也就是销毁进程一系列操作了, 这样才能把分配的资源收回来啊!)&lt;/p>
&lt;/blockquote>
&lt;h1>references&lt;/h1>&lt;ol>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Program_counter" target="_blank" rel="noopener">program counter&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://cseweb.ucsd.edu/classes/sp10/cse141/pdf/02/S01_x86_64.key.pdf" target="_blank" rel="noopener">A reader&amp;rsquo;s guide to x86 assembly&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cs.virginia.edu/~evans/cs216/guides/x86.html" target="_blank" rel="noopener">x86 guide&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Instruction_cycle" target="_blank" rel="noopener">instruction cycle&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://chortle.ccsu.edu/assemblytutorial/Chapter-17/ass17_2.html" target="_blank" rel="noopener">how jump work&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Stack_register" target="_blank" rel="noopener">stack pointer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Call_stack" target="_blank" rel="noopener">call stack&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bogotobogo.com/cplusplus/stackunwinding.php" target="_blank" rel="noopener">stack-winding(push)-unwinding(pop)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bogotobogo.com/cplusplus/assembly.php" target="_blank" rel="noopener">understand-heap-assembly&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://keleshev.com/eax-x86-register-meaning-and-history/" target="_blank" rel="noopener">eax-x86-register-meaning-and-history&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://flint.cs.yale.edu/cs421/papers/x86-asm/asm.html" target="_blank" rel="noopener">flint.cs.yale.edu/cs421/papers/x86-asm/asm.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://csiflabs.cs.ucdavis.edu/~ssdavis/50/att-syntax.htm" target="_blank" rel="noopener">at&amp;amp;t 语法&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://c9x.me/x86/" target="_blank" rel="noopener">x86-instruction-list&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://people.cs.rutgers.edu/~pxk/419/notes/frames.html" target="_blank" rel="noopener">stack-frame-example&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.crockford.com/x64.html" target="_blank" rel="noopener">x64&lt;/a>&lt;/li>
&lt;/ol></description></item></channel></rss>